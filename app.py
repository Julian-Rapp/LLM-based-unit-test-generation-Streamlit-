# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NyX3hXdMXSgmqrWVpXU_TsKEBoUmfjq1
"""

import os
import re
import ast
import textwrap
import datetime
import streamlit as st

# --------- UI CONFIG ---------
st.set_page_config(page_title="LLM Unit Test Generator", page_icon="ðŸ§ª", layout="wide")
st.title("ðŸ§ª LLM Unit Test Generator")
st.caption("Paste code â†’ pick language & framework â†’ generate unit tests with an LLM (OpenAI).")

# --------- HELPERS ---------
LANG_FRAMEWORKS = {
    "Python": ["pytest", "unittest"],
    "JavaScript": ["Jest", "Mocha"],
    "Java": ["JUnit 5"],
    "Go": ["go test"],
}

FILE_HEADER_BY_LANG = {
    "Python": "# FILE: {fname}",
    "JavaScript": "// FILE: {fname}",
    "Java": "// FILE: {fname}",
    "Go": "// FILE: {fname}",
}

DEFAULT_TEST_FILENAME = {
    ("Python", "pytest"): "test_generated.py",
    ("Python", "unittest"): "test_generated.py",
    ("JavaScript", "Jest"): "generated.test.js",
    ("JavaScript", "Mocha"): "generated.spec.js",
    ("Java", "JUnit 5"): "GeneratedTest.java",
    ("Go", "go test"): "generated_test.go",
}

EXAMPLES = {
    "Python": textwrap.dedent("""
        def is_prime(n: int) -> bool:
            if n < 2:
                return False
            i = 2
            while i * i <= n:
                if n % i == 0:
                    return False
                i += 1
            return True
    """).strip(),
    "JavaScript": textwrap.dedent("""
        export function sum(a, b) {
          return a + b;
        }
    """).strip(),
    "Java": textwrap.dedent("""
        public class MathUtil {
            public static int gcd(int a, int b) {
                if (b == 0) return Math.abs(a);
                return gcd(b, a % b);
            }
        }
    """).strip(),
    "Go": textwrap.dedent("""
        package calc

        func Max(a, b int) int {
            if a > b {
                return a
            }
            return b
        }
    """).strip(),
}

def parse_python_symbols(code_text: str):
    """Extract top-level function and class names from Python code to help the prompt."""
    try:
        tree = ast.parse(code_text)
    except SyntaxError:
        return [], []
    funcs, classes = [], []
    for node in tree.body:
        if isinstance(node, ast.FunctionDef):
            funcs.append(node.name)
        elif isinstance(node, ast.ClassDef):
            classes.append(node.name)
    return funcs, classes

def build_system_prompt(language: str, framework: str, property_tests: bool, mocks_ok: bool) -> str:
    base = f"""You are a senior {language} test engineer. Generate a HIGH-QUALITY unit test file for the provided code using {framework}.
- Cover typical, edge, and negative cases.
- Avoid placeholder assertions; assert concrete, verifiable outcomes.
- Structure the tests clearly with AAA (Arrangeâ€“Actâ€“Assert).
- If the code uses randomness, time, or I/O, isolate and mock these dependencies appropriately ({'allowed to use mocks/stubs' if mocks_ok else 'do NOT include external network/file I/O; simulate inputs in-memory only'}).
- Add minimal, necessary imports only.
- Ensure the test file is executable with {framework} out-of-the-box.
"""
    if language == "Python" and property_tests:
        base += "- Where appropriate, add 1â€“2 property-based tests using Hypothesis.\n"
    if language == "JavaScript" and property_tests:
        base += "- Where appropriate, add 1â€“2 property-based tests using fast-check.\n"
    # Filename header instruction (weâ€™ll parse it for the download button)
    base += """
OUTPUT FORMAT (IMPORTANT):
Return ONLY a single fenced code block. Start the file with a single comment line containing the exact target filename:
For example:
# FILE: test_foo.py      (Python)
or
// FILE: foo.test.js     (JavaScript / Java / Go)
Then the test code follows. Do not include any extra commentary outside the code block.
"""
    return base.strip()

def build_user_prompt(code_text: str, language: str, framework: str, funcs=None, classes=None) -> str:
    details = []
    if funcs:
        details.append(f"Top-level functions: {', '.join(funcs)}")
    if classes:
        details.append(f"Top-level classes: {', '.join(classes)}")
    meta = "\n".join(details)
    return f"""LANGUAGE: {language}
TEST FRAMEWORK: {framework}
{('CODE STRUCTURE:\n' + meta) if meta else ''}

SOURCE CODE: